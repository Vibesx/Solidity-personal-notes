Solidity course commands:

General:
NOTE: --dev adds dependencies that are only used for dev purposes (ex: prettier); without --dev, you add dependencies that are needed for the frontend end product (i.e.: reactJS, nextJS, etc)

node filename.js >>> run filename.js
yarn solcjs --bin --abi --include-path node_modules/ --base-path . -o . SimpleStorage.sol  >>> compile solidity file
yarn add --dev prettier prettier-plugin-solidity >>> add prettier to project
yarn add --dev dotenv >>> add dotenv to project, for manipulating .env files and env properties
yarn add --dev hardhat-gas-reporter >>> extension for tests to display gas costs
yarn add --dev solidity-coverage >>> plugin for test coverage of .sol files
yarn add --dev hardhat-deploy >>> deploy plugin
yarn add --dev @nomiclabs/hardhat-ethers@npm:hardhat-deploy-ethers ethers >>> replaces @nomiclabs/hardhat-ethers with hardhat-deploy-ethers
yarn global add hardhat-shorthand >>> adds a package that allows us to write hh instead of hardhat in terminal commands; also provides autocomplete
yarn add react react-dom moralis react-moralis >>> add react and react-moralis
yarn add redux react-redux >>> add redux for react
yarn add @reduxjs/toolkit >>> add redux toolkit   // note: redux is included in redux toolkit (react-redux is not though)
yarn add react-router-dom (optionally followed by @<version> for a certain version or @latest for latest version) >>> add react router
yarn add web3uikit >>> adds web3uikit to project
yarn add --dev tailwindcss postcss autoprefixer >>> install tailwindcss
yarn add --dev @openzeppelin/contracts >>> add OpenZeppelin contracts package to our project
yarn add --dev @openzeppelin/hardhat-upgrades >>> add OpenZeppelin hardhat upgrades (for proxy dev for example)
yarn add --dev @pinata/sdk >>> add pinata sdk to project
yarn add --dev path >>> add path package to project (helps with file paths)
yarn add --dev base64-sol >>> add base64-sol to project, for base64 encoding/decoding
yarn add graphql >>> adds graphQL
yarn add --dev @apollo/client >>> add appolo client
yarn add styled-components >>> add styled-components, which is a library that helps with styling individual components in react




Hardhat:
NOTE: npm and npx commands are both similar to yarn so they can both be replaced with yarn

yarn init >>> initiate a project (similar to npm init)
yarn add --dev hardhat >>> initiate hardhat project
yarn hardhat >>> create a hardhat project if none is present in current folder (if this doesn't work, check troubleshoot at 8:30:30 in video)
yarn hardhat >>> if project exists in folder it can be used as a sort of help to get a list of possible actions
yarn hardhat run <file> >>> runs file
yarn hardhat run <file> --network <network_name> >>> runs file on a certain network
yarn hardhat verify >>> allows us to verify contract on Etherscan once we add the etherscan plugin to hardhat and set it up (adding etherscan in hardhat.config.js, in exports, together with the API Key taken from etherscan website); check Hardhat docs for more details on syntax
yarn hardhat node >>> creates a hardhat node similar to Ganache, so that it doesn't get reset after each time we run a script
yarn hardhat console (--network <network_name>) >>> opens up hardhat console in the terminal; in the console we can write JS code like we would do in a JS script
yarn hardhat clean >>> cleans artifacts and cache folders (similar to mvn clean)
yarn hardhat compile >>> compiles the entire project (similar to mvn install)
yarn hardhat test >>> runs tests in the test folder
yarn hardhat test --grep <description> >>> run only tests that contain <description> in their description; NOTE: case sensitive
yarn hardhat coverage >>> generates a test coverage report; requires solidity-coverage plugin
yarn hardhat deploy >>> deploy contracts (requires hardhat-deploy plugin)
yarn hardhat deploy --tags <tag> >>> deploy only scripts that have tag <tag>




Frontend:

NextJS:
yarn create next-app (.) >>> creates a nextapp project (add . for current folder)
yarn run dev >>> run app
yarn build >> creates and optimized production build
yarn next export >>> generates static code; creates an out folder with all the files

React:
yarn create react-app <app_name> >>> creates a new react application in <app_name> folder

Typescript:
yarn add --dev typescript typechain ts-node @typechain/ethers-v5 @typechain/hardhat @types/chai @types/node >>> add necessary typescript dependencies


TailwindCSS:
yarn tailwindcss init -p >>> initiates tailwindcss in our project


Moralis:
yarn global add moralis-admin-cli
moralis-admin-cli >>> list of available commands
moralis-admin-cli connect-local-devchain --chain hardhat --moralisSubdomain x64wiujxzejy.usemoralis.com --frpcPath ./frp/frpc >>> same as running ./frpc -c frpc.ini, but can be put into a script and can take api key and api secret from .env
After running the above command, you will get Starting connection to Hardhat; you now need to go to Devchain Proxy Server on Moralis and hit the Disconnected button; it should turn into Connected

For FRPC: download latest for your OS (linux for WSL): https://github.com/fatedier/frp/releases ; then extract frpc and frpc.ini into a folder; cd into that folder and modify frpc.ini as described in Devchain Proxy Server in moralis; then run:
chmod +x frpc (gives frpc execution rights; you get Permission denied otherwise)
./frpc -c frpc.ini

Sample .env for moralis:
moralisApiSecret=xxxxxxxxx
moralisApiKey=xxxxxxxxxx
moralisSubdomain=xxxxxxxxxxxx.usemoralis.com

Set up Cloud Functions in IDE (requires moralis-admin-cli installed); instructions also available in servers -> Cloud Functions (near Dashboard and Plugins); moralisApiSecret and moralisApiKey can be removed if they are available in .env:
moralis-admin-cli watch-cloud-folder --moralisApiKey xxxxxxxxx --moralisApiSecret xxxxxxxxx --moralisSubdomain xxxxxxxxx.usemoralis.com --autoSave 1 --moralisCloudfolder /path/to/cloud/folder


TheGraph:
yarn global add @graphprotocol/graph-cli >>> install graph cli; !!! MIGHT NOT WORK ON WSL/UBUNTU/LINUX !!! Use npm install instead if so
npm install -g @graphprotocol/graph-cli
graph init --studio <subgraph_name> >>> initialize subgraph
graph codegen >>> generates a .ts file in generated folder, based on our schema.graphql file
Auth & Deploy (also available in main subgraph page):
graph auth --studio <deploy_key> >>> deploy_key can be found in main subgraph page
graph codegen && graph build
graph deploy --studio <subgraph_name>


Slither:
pip3 intall solc-select >>> for auditing; if it gives an error related to PATH, copy solc and solc-select into /usr/bin/ (the initial install folder should be stated in the error)
solc-select install <solidity_version> >>> installs given solidity version to be usable by solc-select
solc-select use <solidity_version> >>> makes solc-select use a certain Solidity version (Slither will use this version)
yarn slither >>> performs audit on ./contracts folder; this is a script defined in package.json, so it is customiseable

Note: problems detected by Slither will come with a reference link to a description of the problem
Red text = serious issues; Green text = minor issues or warnings



Other:

yarn solhint <sol_filename>/*.sol (for all files ending in .sol) >>> linting plugin that verifies code; the process of linting is an analysis of the file for possible errors or bad practices (warnings); solhint is for Solidity and for Javascript there is ESLint




Initial project setup:

yarn add --dev hardhat
yarn hardhat -> choose one of the options to create new project
// add a bunch of useful dependencies; can be adjusted:
yarn add --dev @nomiclabs/hardhat-ethers@npm:hardhat-deploy-ethers ethers @nomiclabs/hardhat-etherscan @nomiclabs/hardhat-waffle chai ethereum-waffle hardhat hardhat-contract-sizer hardhat-deploy hardhat-gas-reporter prettier prettier-plugin-solidity solhint solidity-coverage dotenv
yarn hardhat compile -> after creating contract (.sol file)
yarn add web3uikit moralis react-moralis

Hardhat Starter Kit:
git clone https://github.com/smartcontractkit/hardhat-starter-kit



VSCode Installed plugins:

Solidity + Hardhat
JSON Tools
Live Server
PostCSS Lanugage Support
Prettier - Code formatter
Remote Development
Remote - WSL
Remote - SSH
Remote - Containers
