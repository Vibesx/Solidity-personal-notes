Stuff to read about:

NatSpec (sort of Java documentations)
Doxygen (NatSpec was inspired byb Doxygen)
solc (command that auto-generates documentation based on NatSpec)
Storage - check out github @ PatrickAlphaC/hardhat-fund-me-fcc   /contracts/exampleContracts/FunWithStorage.sol and /deploy/99-deploy-storage-fun.js; pay extra attention to understanding arrays and mappings (do some examples to better understand them)
Hardhat network reference >>> http://hardhat.org/hardhat-networkk/reference/
callstatic
Better understand what network.provider is
Listening to contract events on the frontend
AAVE Liquidation
aTokens
OpCodes, low level Solidity, etc >>> https://blog.openzeppelin.com/deconstructing-a-solidity-contract-part-ii-creation-vs-runtime-6b9d60ecb44c/
fallback and receive functions


Other notes:

In order to show your LINK wallet in your Metamask account, you go to Chainlink docs -> LINK Token Contracts -> <your_prefered_network> (in my case Rinkeby) and copy address -> in Metamask go to Assets -> Import tokens and copy the address in here; 
this is the long way, as the Chainlink docs has an "Add to wallet" option now that does all the copying for you (added this long way for future reference) 

Fleek: 
Build commands for yarn:  yarn && yarn run build && yarn next export 



Stuff to learn: 
ReactJS >>> https://www.youtube.com/watch?v=bMknfKXIFA8&ab_channel=freeCodeCamp.org    ~12h
NextJS >>> https://www.youtube.com/watch?v=mTz0GXj8NN0&ab_channel=TraversyMedia   ~1h
GraphQL
How to Connect your Smart Contracts to Metamask >>> https://www.youtube.com/watch?v=pdsYCkUWrgQ&ab_channel=PatrickCollins   ~1h
DeFi



Optional stuff to learn/consolidate:
CSS, Bootstrap
Short selling and Margin trading

Note on ERC20 protocols (ex: AAVE):
When we send ERC1 tokens to this protocol, like ETH or Polygon, they get wrapped in something called WETH (Wrapped ETH)
In order to manually get WETH into our wallet, we can go to the Wrapped Ether contract on the testnet of our choice (Rinkeby is 0xc778417e063141139fce010982780140aa0cd5ab), Contract tab and Write Contract and call the deposit() function with our desired amount (need to connect wallet 1st!)
Afterwards, we check if the transaction went through and if it did, we can add the Wrapped Ether contract address to our wallet by going to Assets -> Import tokens and copying in the address (0xc778417e063141139fce010982780140aa0cd5ab in our example)
If we want to withdraw our tokens, we do the same as we did with deposit(), but using withdraw() function

Base64:
To convert an to text using Base64, go to https://base64.guru/converter/encode/image , select Local image or Remote URL, Encode image to Base64. This results in a Base64 encoding, which you can view doing data:image/svg+xml;base64,<Base64_encoding>